
#ifdef IN_GBUF
    
    uniform sampler2D m_GBuffer0;
    uniform sampler2D m_GBuffer1;
    uniform sampler2D m_GBuffer2;
    uniform sampler2D m_GBuffer3;
    uniform sampler2D m_GBuffer4;

    vec3 getPosition(in vec2 texCoord, in float depth, in mat4 matrixInverse){
        vec4 pos = vec4(1.0);
        pos.xy = (texCoord * vec2(2.0)) - vec2(1.0);
        pos.z = depth * 2.0 - 1.0;
        //pos.w  = 1.0;
        pos = matrixInverse * pos;
        pos.xyz /= pos.w;
        return pos.xyz;
    }
    
    vec3 getPosition(in vec2 texCoord, in mat4 matrixInverse){
        return getPosition(texCoord, texture2D(m_GBuffer4, texCoord).r, matrixInverse);
    }
    
#else
    #if __VERSION__ >= 120
        layout(location = 0) out vec4 outGBuffer0;
        layout(location = 1) out vec4 outGBuffer1;
        layout(location = 2) out vec4 outGBuffer2;
        layout(location = 3) out vec4 outGBuffer3;
        layout(location = 4) out vec4 outGBuffer4;
    #else
        #define outGBuffer0 gl_FragData[0]
        #define outGBuffer1 gl_FragData[1]
        #define outGBuffer2 gl_FragData[2]
        #define outGBuffer3 gl_FragData[3]
        #define outGBuffer4 gl_FragData[4]
    #endif
#endif

vec3 decodeNormal(in vec4 enc){
    vec4 nn = enc * vec4(2.0,2.0,0.0,0.0) + vec4(-1.0,-1.0,1.0,-1.0);
    float l = dot(nn.xyz, -nn.xyw);
    nn.z = l;
    nn.xy *= sqrt(l);
    return nn.xyz * vec3(2.0) + vec3(0.0,0.0,-1.0);
}



